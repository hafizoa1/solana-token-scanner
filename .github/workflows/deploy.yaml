name: Deploy to AWS Lambda
on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
env:
  AWS_REGION: eu-north-1                    # Set your AWS region
  LAMBDA_FUNCTION_PROD: token-scanner-prod  # Production function name
  LAMBDA_FUNCTION_DEV: token-scanner-dev    # Development function name
  PYTHON_VERSION: "3.9"                     # Python version
  S3_BUCKET: solana-token-bucket            # Your S3 bucket name
  LAMBDA_ROLE_ARN: arn:aws:iam::474668399384:role/lambda-execution-role  # Your Lambda execution role
  API_NAME: TelegramBotApi                  # API Gateway name (match your existing API)
permissions:
  contents: read
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
   
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
       
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install -r requirements.txt
       
    - name: Run tests
      run: |
        pytest tests/
  deploy:
    name: Deploy
    needs: test
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
   
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

        
    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r app/ deployment/
        cp lambda_handler.py deployment/
       
        # Install dependencies
        pip install --target deployment/ -r requirements.txt
       
        cd deployment
        zip -r ../function.zip .
        cd ..
        
    - name: Set environment variables based on branch
      id: set-env
      run: |
        if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
          echo "LAMBDA_FUNCTION=${{ env.LAMBDA_FUNCTION_PROD }}" >> $GITHUB_ENV
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.PROD_TELEGRAM_BOT_TOKEN }}" >> $GITHUB_ENV
          echo "TELEGRAM_CHAT_ID=${{ secrets.PROD_TELEGRAM_CHAT_ID }}" >> $GITHUB_ENV
          echo "API_STAGE=prod" >> $GITHUB_ENV
        else
          echo "LAMBDA_FUNCTION=${{ env.LAMBDA_FUNCTION_DEV }}" >> $GITHUB_ENV
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.DEV_TELEGRAM_BOT_TOKEN }}" >> $GITHUB_ENV
          echo "TELEGRAM_CHAT_ID=${{ secrets.DEV_TELEGRAM_CHAT_ID }}" >> $GITHUB_ENV
          echo "API_STAGE=dev" >> $GITHUB_ENV
        fi
        
    - name: Upload package to S3
      run: |
        # Create a unique key name using the function name and commit SHA
        S3_KEY="${{ env.LAMBDA_FUNCTION }}-${{ github.sha }}.zip"
        
        # Upload the zip file to S3
        aws s3 cp function.zip s3://${{ env.S3_BUCKET }}/$S3_KEY
        
        # Store the S3 key for use in the next step
        echo "S3_KEY=$S3_KEY" >> $GITHUB_ENV

    - name: Check if Lambda function exists
      id: check-function
      run: |
        if aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION }} &>/dev/null; then
          echo "Function exists, will update"
          echo "function_exists=true" >> $GITHUB_OUTPUT
        else
          echo "Function doesn't exist, will create"
          echo "function_exists=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Lambda function if it doesn't exist
      if: steps.check-function.outputs.function_exists == 'false'
      run: |
        # Create Lambda function without environment variables first
        aws lambda create-function \
          --function-name ${{ env.LAMBDA_FUNCTION }} \
          --runtime python3.9 \
          --role ${{ env.LAMBDA_ROLE_ARN }} \
          --handler lambda_handler.lambda_handler \
          --timeout 300 \
          --memory-size 256 \
          --code S3Bucket=${{ env.S3_BUCKET }},S3Key=${{ env.S3_KEY }}
        
        # Wait for function creation to complete
        aws lambda wait function-active --function-name ${{ env.LAMBDA_FUNCTION }}
        
    - name: Update Lambda Environment Variables
      run: |
        # This step runs whether the function was created or already existed
        aws lambda update-function-configuration \
          --function-name ${{ env.LAMBDA_FUNCTION }} \
          --timeout 300 \
          --memory-size 256 \
          --environment "Variables={TELEGRAM_BOT_TOKEN=${{ env.TELEGRAM_BOT_TOKEN }},TELEGRAM_CHAT_ID=${{ env.TELEGRAM_CHAT_ID }}}"
          
    - name: Update Lambda Function Code (if function already existed)
      if: steps.check-function.outputs.function_exists == 'true'
      run: |
        aws lambda update-function-code \
          --function-name ${{ env.LAMBDA_FUNCTION }} \
          --s3-bucket ${{ env.S3_BUCKET }} \
          --s3-key ${{ env.S3_KEY }}
          
    - name: Wait for Lambda update to complete
      run: |
        aws lambda wait function-updated --function-name ${{ env.LAMBDA_FUNCTION }}

    - name: Set up API Gateway
      run: |
        # Check if API exists
        API_ID=$(aws apigateway get-rest-apis --query "items[?name=='${{ env.API_NAME }}'].id" --output text)
        
        if [ -z "$API_ID" ]; then
          echo "Creating new API Gateway"
          API_ID=$(aws apigateway create-rest-api --name ${{ env.API_NAME }} --query "id" --output text)
          
          # Get the root resource ID
          ROOT_ID=$(aws apigateway get-resources --rest-api-id $API_ID --query "items[?path=='/'].id" --output text)
          
          # Create a resource
          RESOURCE_ID=$(aws apigateway create-resource --rest-api-id $API_ID --parent-id $ROOT_ID --path-part webhook --query "id" --output text)
          
          # Create a POST method
          aws apigateway put-method --rest-api-id $API_ID --resource-id $RESOURCE_ID --http-method POST --authorization-type NONE
          
          # Set up Lambda integration
          aws apigateway put-integration \
            --rest-api-id $API_ID \
            --resource-id $RESOURCE_ID \
            --http-method POST \
            --type AWS_PROXY \
            --integration-http-method POST \
            --uri arn:aws:apigateway:${{ env.AWS_REGION }}:lambda:path/2015-03-31/functions/arn:aws:lambda:${{ env.AWS_REGION }}:$(aws sts get-caller-identity --query Account --output text):function:${{ env.LAMBDA_FUNCTION }}/invocations
        else
          echo "API Gateway exists with ID: $API_ID"
          
          # Get resources to check if webhook exists
          RESOURCES=$(aws apigateway get-resources --rest-api-id $API_ID)
          ROOT_ID=$(echo $RESOURCES | jq -r '.items[] | select(.path=="/") | .id')
          WEBHOOK_RESOURCE=$(echo $RESOURCES | jq -r '.items[] | select(.path=="/webhook") | .id')
          
          # Create webhook resource if it doesn't exist
          if [ -z "$WEBHOOK_RESOURCE" ] || [ "$WEBHOOK_RESOURCE" == "null" ]; then
            echo "Creating webhook resource"
            RESOURCE_ID=$(aws apigateway create-resource --rest-api-id $API_ID --parent-id $ROOT_ID --path-part webhook --query "id" --output text)
            
            # Create POST method
            aws apigateway put-method --rest-api-id $API_ID --resource-id $RESOURCE_ID --http-method POST --authorization-type NONE
            
            # Set up Lambda integration
            aws apigateway put-integration \
              --rest-api-id $API_ID \
              --resource-id $RESOURCE_ID \
              --http-method POST \
              --type AWS_PROXY \
              --integration-http-method POST \
              --uri arn:aws:apigateway:${{ env.AWS_REGION }}:lambda:path/2015-03-31/functions/arn:aws:lambda:${{ env.AWS_REGION }}:$(aws sts get-caller-identity --query Account --output text):function:${{ env.LAMBDA_FUNCTION }}/invocations
          else
            echo "Webhook resource exists, updating integration"
            
            # Update Lambda integration
            aws apigateway put-integration \
              --rest-api-id $API_ID \
              --resource-id $WEBHOOK_RESOURCE \
              --http-method POST \
              --type AWS_PROXY \
              --integration-http-method POST \
              --uri arn:aws:apigateway:${{ env.AWS_REGION }}:lambda:path/2015-03-31/functions/arn:aws:lambda:${{ env.AWS_REGION }}:$(aws sts get-caller-identity --query Account --output text):function:${{ env.LAMBDA_FUNCTION }}/invocations
          fi
        fi
        
        # Deploy the API
        DEPLOYMENT_ID=$(aws apigateway create-deployment \
          --rest-api-id $API_ID \
          --stage-name ${{ env.API_STAGE }} \
          --description "Deployed by GitHub Actions" \
          --query "id" \
          --output text)
        
        echo "API Gateway deployed with ID: $DEPLOYMENT_ID"
        
        # Grant API Gateway permission to invoke Lambda
        aws lambda add-permission \
          --function-name ${{ env.LAMBDA_FUNCTION }} \
          --statement-id apigateway-${{ env.API_STAGE }} \
          --action lambda:InvokeFunction \
          --principal apigateway.amazonaws.com \
          --source-arn "arn:aws:execute-api:${{ env.AWS_REGION }}:$(aws sts get-caller-identity --query Account --output text):$API_ID/*/*/*" \
          || echo "Permission may already exist"
        
        # Get the Invoke URL
        INVOKE_URL="https://$API_ID.execute-api.${{ env.AWS_REGION }}.amazonaws.com/${{ env.API_STAGE }}/webhook"
        echo "API Gateway Invoke URL: $INVOKE_URL"
        
        # Register webhook with Telegram
        echo "Updating Telegram webhook to URL: $INVOKE_URL"
        WEBHOOK_RESPONSE=$(curl -s "https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/setWebhook?url=$INVOKE_URL")
        echo "Webhook update response: $WEBHOOK_RESPONSE"
       
    - name: Verify deployment
      run: |
        # Test invoke the function with error handling
        output=$(aws lambda invoke \
          --function-name ${{ env.LAMBDA_FUNCTION }} \
          --cli-binary-format raw-in-base64-out \
          --payload '{"source": "github-action-test"}' \
          --query 'StatusCode' \
          response.json || echo "FAILED")
  
        if [ "$output" == "200" ]; then
          echo "Lambda function invoked successfully"
          cat response.json
        else
          echo "Lambda function invocation failed with output: $output"
          cat response.json || echo "No response file generated"
          exit 1
        fi